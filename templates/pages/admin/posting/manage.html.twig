{% extends 'layouts/base.html.twig' %}
{% form_theme form 'common/forms/bundle.html.twig' %}

{% block body %}
    <div class="w-100 pt-4  container">
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message|trans|raw }}
            </div>
        {% endfor %}
        <div class="card bg-light mb-3">
            <div class="card-header">{{ 'components.posting.create.header'|trans }}</div>
            <div class="card-body">
                {{ form_start(form) }}
                {{ form_row(form.title) }}
                {{ form_row(form.description) }}
                {{ form_row(form.assignedTo) }}

                <div class="mb-3">
                    {% set questionnaire %}
                        {{ form_row(form.questionnaire.questions, {row_class: 'mb-0', attr: {class: 'd-flex flex-column gap-2', 'data-hook': 'dependent-questions'}}) }}
                    {% endset %}
                    {% embed 'common/list-accordion/accordion.html.twig' %}
                        {% embed 'common/list-accordion/accordion-item.html.twig' %}
                            {% block button %}
                                {{ form_label(form.questionnaire, null, {element: 'a', 'label_attr': attrs.all}) }}
                            {% endblock %}
                            {% block body %}
                                <div class="px-2 py-2" style="max-height: 200px; overflow-y: auto">
                                    {{ questionnaire }}
                                </div>
                            {% endblock %}
                        {% endembed %}
                    {% endembed %}
                </div>
                <div class="col-md-12 mb-3">
                    {{ form_button(form, {variant: 'primary', icon: 'user', label: 'common.save'|trans}) }}
                    {{ form_button(form, {variant: 'secondary', icon: 'door-open', label: 'Back', href: path('app_admin_posting_index')}) }}
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
{% endblock %}

{% set js %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.querySelector('[data-hook=dependent-questions]');

            // Create maps keyed by question-key for O(1) lookups
            const elementMap = new Map();
            const childrenMap = new Map();
            const parentMap = new Map();

            // Single pass to build all maps
            form.querySelectorAll('[data-question-key]').forEach(el => {
                const key = el.dataset.questionKey;
                elementMap.set(key, el);

                const dependsOn = el.dataset.dependsOn;
                if (dependsOn) {
                    const parents = JSON.parse(dependsOn);
                    parentMap.set(key, parents);

                    parents.forEach(parentKey => {
                        if (!childrenMap.has(parentKey)) {
                            childrenMap.set(parentKey, new Set());
                        }
                        childrenMap.get(parentKey).add(key);
                    });
                }
            });

            const hasForceCheckedChildren = (key) => {
                const children = childrenMap.get(key);
                if (!children) return false;

                return Array.from(children).some(childKey => {
                    const child = elementMap.get(childKey);
                    return child && child.disabled && child.checked;
                });
            };

            const handleChange = ({target}) => {
                // Ignore changes on disabled checkboxes
                if (target.disabled) {
                    // Revert any attempted changes on disabled checkboxes
                    target.checked = target.hasAttribute('checked');
                    return;
                }

                const key = target.dataset.questionKey;
                const isChecked = target.checked;

                if (!isChecked && hasForceCheckedChildren(key)) {
                    // Prevent unchecking if has force-checked children
                    target.checked = true;
                    return;
                }

                if (isChecked && parentMap.has(key)) {
                    // Check parents (unless disabled)
                    parentMap.get(key).forEach(parentKey => {
                        const parent = elementMap.get(parentKey);
                        if (parent && !parent.checked && !parent.disabled) {
                            parent.checked = true;
                            parent.dispatchEvent(new Event('change', {bubbles: true}));
                        }
                    });
                } else if (!isChecked && childrenMap.has(key)) {
                    // Uncheck only non-forced children
                    childrenMap.get(key).forEach(childKey => {
                        const child = elementMap.get(childKey);
                        if (child && child.checked && !child.disabled) {
                            child.checked = false;
                            child.dispatchEvent(new Event('change', {bubbles: true}));
                        }
                    });
                }
            };

            // // Validate initial state
            // elementMap.forEach((el, key) => {
            //     if (el.checked && parentMap.has(key)) {
            //         // Ensure parents of checked dependents are checked
            //         parentMap.get(key).forEach(parentKey => {
            //             const parent = elementMap.get(parentKey);
            //             if (parent && !parent.disabled) {
            //                 parent.checked = true;
            //                 parent.disabled = true;
            //             }
            //         });
            //     }
            //
            //     // If element has force-checked children, ensure it's checked
            //     if (hasForceCheckedChildren(key)) {
            //         el.checked = true;
            //         el.disabled = true;
            //     }
            // });

            // Single event listener delegation
            form.addEventListener('change', e => {
                if (e.target.dataset.questionKey) {
                    handleChange(e);
                }
            });
        });
    </script>
{% endset %}

{% block javascripts %}
    {{ assets_scripts().addScript(js) }}
    {{ parent() }}
{% endblock %}
