@import 'bootstrap/scss/bootstrap.scss';

$card-cap-padding-y: $card-spacer-y * .75;

@each $breakpoint in map-keys($grid-breakpoints) {
    $properties: (
        width: w,
        height: h,
        'min-width': 'min-w',
        'max-width': 'max-w',
        'min-height': 'min-h',
        'max-height': 'max-h',
        'padding-top': 'pt',
        'padding-bottom': 'pb',
        'padding-left': 'ps',
        'padding-right': 'pe',
        'margin-top': 'mt',
        'margin-bottom': 'mb',
        'margin-left': 'ms',
        'margin-right': 'me'
    );
    $sizeKeys: (
        '100': 100%,
        '75': 75%,
        '50': 50%,
        '33': 33%,
        '25': 25%,
        'auto': auto
    );

    @each $propertyName in map-keys($properties) {
        $propertyClass: map-get($properties, $propertyName);

        @each $sizeKey in map-keys($sizeKeys) {
            $sizeValue: map-get($sizeKeys, $sizeKey);

            .#{$propertyClass}-#{$sizeKey} {
                #{$propertyName}: $sizeValue;
            }

            @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
                .#{$propertyClass}-#{$breakpoint}-#{$sizeKey} {
                    #{$propertyName}: $sizeValue;
                }
            }
        }
    }
    $border-directions: (
        '': '',
        '-top': '-top',
        '-end': '-right',
        '-bottom': '-bottom',
        '-start': '-left'
    );

    @each $suffix, $direction in $border-directions {
        @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
            .border-#{$breakpoint}#{$suffix} {
                border#{$direction}: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
            }

            .border-#{$breakpoint}#{$suffix}-0 {
                border#{$direction}: 0 !important;
            }
        }
    }
}

.card-flush.card {
    border-radius: 0;

    & > .card-header {
        border-radius: 0;
    }

    & > .card-body {
        border-radius: 0;
    }

    & > .card-footer {
        border-radius: 0;
    }
}


.card-group-vertical > .card {
    margin-bottom: var(--bs-card-group-margin);
}

.card-group-vertical {
    display: flex;
    flex-flow: column wrap;
}

.card-group-vertical > .card {
    flex: 1 0 0;
    margin-bottom: 0;
}

.card-group-vertical > .card + .card:not(:last-child) {
    margin-bottom: 0;
    border-bottom: 0;
}

.card-group-vertical > .card:not(:last-child) {
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
}

.card-group-vertical > .card:not(:last-child) .card-img-top,
.card-group-vertical > .card:not(:last-child) .card-header {
    border-bottom-right-radius: 0;
}

.card-group-vertical > .card:not(:last-child) .card-img-bottom,
.card-group-vertical > .card:not(:last-child) .card-footer {
    border-bottom-left-radius: 0;
}

.card-group-vertical > .card:not(:first-child) {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
}

.card-group-vertical > .card:not(:first-child) .card-img-top,
.card-group-vertical > .card:not(:first-child) .card-header {
    border-top-left-radius: 0;
}

.card-group-vertical > .card:not(:first-child) .card-img-bottom,
.card-group-vertical > .card:not(:first-child) .card-footer {
    border-top-right-radius: 0;
}
